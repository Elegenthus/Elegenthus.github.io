<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Elegenthus&#39;s Blog</title>
    <link>https://Elegenthus.github.io/post/</link>
    <description>Recent content in Posts on Elegenthus&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Jun 2016 00:30:57 +0800</lastBuildDate>
    <atom:link href="https://Elegenthus.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>second</title>
      <link>https://elegenthus.github.io/2016/06/29/second/</link>
      <pubDate>Wed, 29 Jun 2016 00:30:57 +0800</pubDate>
      
      <guid>https://elegenthus.github.io/2016/06/29/second/</guid>
      <description>&lt;p&gt;喜大普奔&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>first</title>
      <link>https://elegenthus.github.io/2016/06/29/first/</link>
      <pubDate>Wed, 29 Jun 2016 00:15:42 +0800</pubDate>
      
      <guid>https://elegenthus.github.io/2016/06/29/first/</guid>
      <description>&lt;p&gt;hello！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://elegenthus.github.io/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elegenthus.github.io/1/01/01/</guid>
      <description>

&lt;h2 id=&#34;这是个人的一点小笔记-记录在学习vue的过程中解决的的一些小需求:555d5f03252d19ecf1a541db14f70083&#34;&gt;这是个人的一点小笔记，记录在学习vue的过程中解决的的一些小需求&lt;/h2&gt;

&lt;p&gt;###在一个页面的父组件中发请求，请求API中数据分别返回到两个子组件中进行渲染
假设我们请求的第一个API是一个包含多个对象的数组，其中每一个对象包含如下评论信息
&lt;pre&gt;&lt;code&gt;
    { &amp;ldquo;body&amp;rdquo;: &amp;ldquo;比较轻松，期末小组做ppt&amp;rdquo;,
    &amp;ldquo;liked&amp;rdquo;: false,
    &amp;ldquo;user_name&amp;rdquo;: &amp;ldquo;学而2016&amp;rdquo;,
     &amp;ldquo;id&amp;rdquo;: 1244,
     &amp;ldquo;likes&amp;rdquo;: 0 }
&lt;/code&gt;&lt;/pre&gt;
我们将从这个API中获取每一个对象的body信息并将其显示在页面上
1.首先，我们创建一个part1.vue，这是第一个子组件的页面，在每一个vue组件的页面中，应该有template标签，里面包含页面上显示的内容，有style标签，控制页面的具体样式，有script标签，包含我们对页面上内容的操作。由于我们此次请求信息返回的是一个数组对象，所以我决定在数组中将其以列表的形式展示出来，在template中代码如下
&lt;pre&gt;&lt;code&gt;
    &lt;template&gt;
    &lt;ul id=&#34;app1&#34;&gt;
      &lt;li v-for = &#34;item in list&#34; &gt;
       {{ item.body }}
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/template&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;对了，还没有解释，其中的item是我为返回的数组取的名字，这一步是在在script标签中进行的
&lt;pre&gt;&lt;code&gt;
    &lt;script&gt;
    export default {
        data (){
        return {
        list:[]
        }
    }
    }
    &lt;/script&gt;
&lt;/code&gt;&lt;/pre&gt;
关于页面的具体样式这里不做赘述，可自行设定，需要提醒的一点是，若用sass来写的话，应该在style标签内加入lang=&amp;lsquo;sass&amp;rsquo;属性
2.接下来是第二个子组件part2.vue，其格式和part1.vue差不多，不过这个组件里我只想显示API返回的数组中第一个对象中的&amp;rdquo;user_name&amp;rdquo;和&amp;rdquo;id&amp;rdquo;属性，在此设第一个对象为obj，想重点提醒一下的是这两个属性在显示时要被包含在一个div中，template中的代码如下
&lt;pre&gt;&lt;code&gt;
    &lt;template&gt;
  &lt;div&gt;
    &lt;div&gt;
      {{ obj.user_name }}
    &lt;/div&gt;
    &lt;div&gt;
      {{ obj.id }}
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;
&lt;/code&gt;&lt;/pre&gt;
3.好了，接下来就是我们的重头戏父组件了，parent.vue
首先上代码
&lt;pre&gt;&lt;code&gt;
&lt;template&gt;
    &lt;div&gt;
      &lt;div v-show=&#34;isLoading&#34;&gt;
        加载中
      &lt;/div&gt;
      &lt;courseInfo ref=&#34;courseInfo&#34;&gt;&lt;/courseInfo&gt;
      &lt;courseComment ref=&#34;comment&#34;&gt;&lt;/courseComment&gt;
    &lt;/div&gt;
&lt;/template&gt;&lt;/p&gt;

&lt;p&gt;&lt;script&gt;
  import part1 from &amp;lsquo;./part1&amp;rsquo;//把子组件和fecth方法import进来
  import part2 from &amp;lsquo;./part2&amp;rsquo;
  import &amp;lsquo;whatwg-fetch&amp;rsquo;;&lt;/p&gt;

&lt;p&gt;export default {
    data() {
      return {
        isLoading:true
      }
    },
    mounted () {
        let promise1 = fetch(&amp;ldquo;请求的API的相对路径&amp;rdquo;).then( (res) =&amp;gt; {
        return res.json()
      })
      let promise2 = fetch(&amp;ldquo;请求的API的相对路径&amp;rdquo;)
      .then( (res) =&amp;gt; {
        return res.json()
      })
      Promise.all([promise1, promise2]).then( values =&amp;gt; {
        console.log(this.$refs.courseInfo.obj)
        this.$refs.courseInfo.list= values[1]
        this.$refs.comment.obj = values[0]
        this.isLoading = false
      })
    },
    components:{
      &amp;ldquo;courseInfo&amp;rdquo;:part1,
      &amp;ldquo;courseComment&amp;rdquo;:part2
    }
  }
  &lt;/script&gt;
&lt;/code&gt;&lt;/pre&gt;
由于我们这里还会使用fetch方法请求API所以还要先npm装一下fetch（如果只是在最新版的chrome中就不必如此），具体方法见&lt;a href=&#34;https://github.com/github/fetch&#34;&gt;fetch&lt;/a&gt;
data里面我们定义了一个isloding的值，是为了在浏览器还没有请求到数据之前先显示一个加载中的文字or信息提示一下，这个提示页面会一直存在直到所有的信息请求完毕，然后我们把isloading的值改为false转而显示页面应该显示的信息
然后开始请求API，由于返回的是数据流，所以用res.json()把它转换成对象，用promise.all方法对相应的对象进行赋值操作，这里使用了v-ref子组件指定一个索引 ID，这样可以直接访问子组件，详见&lt;a href=&#34;https://vuejs.org.cn/guide/components.html&#34;&gt;vue组件&lt;/a&gt;
最后不要忘记了在component中注册一下子组件哦，这样才能在相应的template中用标签形式引入。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>